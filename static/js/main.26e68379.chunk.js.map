{"version":3,"sources":["hoc/Layout/Layout.js","components/UI/TextArea/TextArea.js","components/Card/Card.js","components/ColumnList/ColumnList.js","components/AddNewColumn/AddNewColumn.js","App.js","serviceWorker.js","index.js"],"names":["Layout","className","this","props","children","Component","TextArea","onBlur","focusOff","onChange","onChangeArea","value","texAreaValue","placeholder","areaPlaceholder","isButtonNeed","style","display","width","onClick","btnClickAdd","btnAddCardValue","btnClickClose","btnCloseCardValue","Card","cardText","ColumnList","state","isAddCard","isChangeTittle","currentTextCard","column","columnTitle","toggleCardHandler","setState","cardTextHandler","e","target","console","log","addCardHandler","arrTextCard","concat","push","text","toggleTitle","titleTextHandler","addColumnListTitle","titleText","map","card","index","key","renderAddCard","AddNewColumn","isAddNewColumn","textNewColumnTitle","columnList","toggleTextArea","changeAreaHandler","addNewColumnHandler","list","title","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26e68379.chunk.js","sourcesContent":["import React,{Component} from \"react\"\r\nimport \"./Layout.css\"\r\n\r\n\r\nexport default class Layout extends Component {\r\n    render(){\r\n        return(\r\n          <main className={'board'}>\r\n              {this.props.children}\r\n          </main>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport \"./TextArea.css\"\r\n\r\nconst TextArea =(props)=> {\r\n  return(\r\n    <div className={'TextArea'}>\r\n      <textarea onBlur={props.focusOff} onChange={props.onChangeArea} value={props.texAreaValue}  placeholder={props.areaPlaceholder}></textarea>\r\n      { props.isButtonNeed\r\n        ?\r\n      <div style={{display:\"flex\",width: \"max-content\"}}>\r\n        <button className={'btnAddCard'} onClick={props.btnClickAdd}>{props.btnAddCardValue}</button>\r\n        <button className={'btnCloseCard'} onClick={props.btnClickClose}>{props.btnCloseCardValue}</button>\r\n      </div>\r\n        : null\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\nexport default TextArea","import React from \"react\"\r\nimport \"./Card.css\"\r\n\r\nconst Card =(props)=> {\r\n  return(\r\n    <div className={'Card'}>\r\n      {props.cardText}\r\n    </div>\r\n  )\r\n}\r\nexport default Card","import React,{Component} from \"react\"\r\nimport Card from \"../Card/Card\"\r\nimport TextArea from \"../UI/TextArea/TextArea\"\r\nimport \"./ColumnList.css\"\r\n\r\n\r\nexport default class ColumnList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props\r\n  }\r\n  state = {\r\n    isAddCard: false,\r\n    isChangeTittle: false,\r\n    currentTextCard:'',\r\n    column: {\r\n      cardText:[],\r\n      columnTitle: this.props.columnTitle\r\n    }\r\n  }\r\n  toggleCardHandler = ()=> {\r\n    this.setState({\r\n      isAddCard: !this.state.isAddCard,\r\n      currentTextCard: ''\r\n    })\r\n  }\r\n\r\n  cardTextHandler =(e)=> {\r\n    this.setState({\r\n      currentTextCard: e.target.value\r\n    })\r\n    console.log(this.state.currentTextCard)\r\n  }\r\n\r\n  addCardHandler =()=> {\r\n    const arrTextCard = this.state.column.cardText.concat()\r\n    let currentTextCard = this.state.currentTextCard\r\n\r\n    arrTextCard.push({text:currentTextCard})\r\n\r\n    if (currentTextCard === ''){\r\n      return null\r\n    }else {\r\n      currentTextCard = ''\r\n      this.setState({\r\n        column: {\r\n          columnTitle: this.state.column.columnTitle,\r\n          cardText: arrTextCard\r\n        },\r\n        currentTextCard\r\n      })\r\n    }\r\n\r\n  }\r\n  toggleTitle=()=>{\r\n    this.setState({\r\n      isChangeTittle: !this.state.isChangeTittle\r\n    })\r\n  }\r\n  titleTextHandler =(e)=> {\r\n    this.setState({\r\n      column:{\r\n        cardText: this.state.column.cardText,\r\n        columnTitle: e.target.value\r\n      }\r\n    })\r\n    console.log(this.state.column.columnTitle)\r\n  }\r\n  addColumnListTitle =()=> {\r\n    let titleText = this.state.column.columnTitle\r\n    this.setState({\r\n      isChangeTittle: false,\r\n      column: {\r\n        cardText: this.state.column.cardText,\r\n        columnTitle: titleText\r\n      }\r\n    })\r\n  }\r\n  renderAddCard (){\r\n      return (\r\n        <div className={'addCard'}>\r\n          {\r\n            !this.state.isAddCard\r\n            ? <div onClick={this.toggleCardHandler} className={'addCard__hover'}>\r\n                <span>+</span>\r\n                <span>Добавить карточку</span>\r\n              </div>\r\n            : <TextArea\r\n                onChangeArea={this.cardTextHandler}\r\n                btnClickAdd={this.addCardHandler}\r\n                btnClickClose={this.toggleCardHandler}\r\n                areaPlaceholder={'Ввести заголовок для этой карточки'}\r\n                texAreaValue={this.state.currentTextCard}\r\n                btnAddCardValue={'Добавить карточку'}\r\n                btnCloseCardValue={'закрыть'}\r\n                isButtonNeed={true}\r\n              />\r\n          }\r\n\r\n        </div>\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className={'ColumnList'}>\r\n        { this.state.isChangeTittle\r\n          ? <TextArea\r\n            onChangeArea={this.titleTextHandler}\r\n            texAreaValue={this.state.column.columnTitle}\r\n            focusOff={this.addColumnListTitle}\r\n            isButtonNeed={false}\r\n          />\r\n          : <h2 onClick={this.toggleTitle}>{this.state.column.columnTitle}</h2>\r\n        }\r\n        {this.state.column.cardText.map((card ,index) => {\r\n          return(\r\n             <Card cardText={card.text} key={index}/>\r\n            )\r\n        })}\r\n        {this.renderAddCard()}\r\n      </div>\r\n      )\r\n  }\r\n}","import React,{Component} from \"react\"\r\nimport TextArea from \"../UI/TextArea/TextArea\"\r\nimport \"./AddNewColumn.css\"\r\nimport ColumnList from \"../ColumnList/ColumnList\"\r\n\r\nexport default class AddNewColumn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props\r\n  }\r\n  state = {\r\n    isAddNewColumn: false,\r\n    textNewColumnTitle:'',\r\n    columnList: []\r\n  }\r\n  toggleTextArea =()=>{\r\n    this.setState({\r\n      isAddNewColumn: !this.state.isAddNewColumn\r\n    })\r\n  }\r\n  changeAreaHandler =(e)=> {\r\n    this.setState({\r\n      textNewColumnTitle: e.target.value\r\n    })\r\n  }\r\n  addNewColumnHandler =()=>{\r\n    const list = this.state.columnList.concat()\r\n\r\n    list.push({title: this.state.textNewColumnTitle})\r\n    this.setState({\r\n      isAddNewColumn: true,\r\n      columnList: list\r\n    })\r\n  }\r\n    render(){\r\n        return(\r\n          <React.Fragment>\r\n            {this.state.columnList.map((column,index)=>{\r\n              return (\r\n                <ColumnList columnTitle={this.state.textNewColumnTitle} key={index}/>\r\n              )\r\n            })}\r\n          <div className={'column-addNewColumn'}>\r\n            { this.state.isAddNewColumn\r\n              ? <div className={'AddNewColumn'} onClick={this.toggleTextArea}>\r\n                <span>+</span>\r\n                <span>Добавить еще одну колонку</span>\r\n              </div>\r\n              : <TextArea\r\n\r\n                onChangeArea={this.changeAreaHandler}\r\n                btnClickAdd={this.addNewColumnHandler}\r\n                btnClickClose={this.toggleTextArea}\r\n                areaPlaceholder={'Ввести заголовок списка'}\r\n                btnAddCardValue={'Добавить список'}\r\n                btnCloseCardValue={'закрыть'}\r\n                isButtonNeed={true}\r\n              />\r\n            }\r\n          </div>\r\n          </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Layout from \"./hoc/Layout/Layout\"\nimport AddNewColumn from \"./components/AddNewColumn/AddNewColumn\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <AddNewColumn/>\n      </Layout>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}